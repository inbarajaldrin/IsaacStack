{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IsaacStack","text":"<p>Welcome to IsaacStack \u2014 a curated library of real-world, task-driven code examples and custom extensions for NVIDIA Isaac Sim and Isaac Lab.</p>"},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":""},{"location":"#snippets","title":"Snippets","text":"<p>Minimal, reusable code blocks for tasks like: - Importing USDs - Adding collision to mesh prims - Connecting OmniGraph to ROS 2 - Publishing custom data to topics</p>"},{"location":"#extensions","title":"Extensions","text":"<p>Custom Isaac Sim extensions created for: - UR5e IK/FK with Lula - ROS 2 Action Graph bridges - URSim\u2013IsaacSim real-time control - ArUco marker detection pipelines</p>"},{"location":"#tutorials","title":"Tutorials","text":"<p>Step-by-step workflows covering: - Robot control setup with ROS 2 + Action Graph - Pick and Place using FK/IK - Writing a custom OmniGraph node - Publishing data from Isaac Sim to external tools</p>"},{"location":"#contribute-to-isaacstack","title":"Contribute to IsaacStack","text":"<p>Do you have a custom Isaac Sim solution or extension you want to share? - Email a short tutorial or <code>.zip</code> to [your@email.com] - Or open a pull request on GitHub - We'll review, organize, and publish it under your name</p>"},{"location":"#stay-connected","title":"Stay Connected","text":"<ul> <li>GitHub: github.com/inbarajaldrin</li> <li>YouTube: IsaacStack Tutorials</li> <li>LinkedIn: Aldrin Inbaraj</li> </ul>"},{"location":"#useful-documentation","title":"Useful Documentation","text":"<p>Here are some helpful official and community resources:</p> <ul> <li>Isaac Sim Documentation</li> <li>Isaac Lab GitHub</li> <li>Isaac Sim Articulation and Physics</li> <li>Creating OmniGraph Nodes</li> <li>OmniKit Programming Guide</li> <li>ROS 2 Bridge Overview</li> <li>[OmniLRS]</li> </ul>"},{"location":"assets/","title":"IsaacStack Assets","text":"<p>Browse and download simulation-ready assets.</p>      Download Robotiq Gripper         Download RG2 Gripper         Download UR5e Robot (Isaac 4.5)         Download UR5e Robot (Isaac 4.2)"},{"location":"blog/","title":"Blog","text":"<p>Welcome to the IsaacStack Blog \u2014 follow updates, tutorials, and insights here.</p> Getting Started with IsaacStack <p>July 1, 2025</p> <p>Understand the purpose of this site and how to use snippets, assets, and extensions effectively.</p> Read More \u2192 How to Create a New Isaac Sim Extension <p>July 3, 2025</p> <p>Learn how to scaffold, structure, and build your own Isaac Sim extension with a working UI template.</p> Read More \u2192 Rigging the Robotiq 2F-85 Gripper <p>July 2, 2025</p> <p>Step-by-step guide to rig and articulate the Robotiq 2F-85 inside Isaac Sim with articulation config.</p> Read More \u2192 Extracting and Reusing Isaac Sim Assets <p>July 2, 2025</p> <p>How to extract the RG2 gripper from an existing robot USD and add articulation.</p> Read More \u2192 UR5e + Robotiq/RG2 Extension <p>July 2, 2025</p> <p>Create an Isaac Sim extension that sets up the UR5e robot with a fully rigged Robotiq 2F-85 gripper.</p> Read More \u2192 Connect URSim to Isaac Sim <p>July 3, 2025</p> <p>Establish bidirectional communication between URSim and Isaac Sim for real-time robot control.</p> Read More \u2192 Launch Isaac Sim in Standalone Mode <p>July 3, 2025</p> <p>Run Isaac Sim headlessly and load Jenga scenes for procedural logic scripting with no GUI.</p> Read More \u2192 Create a Custom OGN Node <p>July 3, 2025</p> <p>Write your own OmniGraph node to stream PoseArray into Isaac Sim's Action Graph system.</p> Read More \u2192 Real-time ArUco Pose Updates <p>July 3, 2025</p> <p>Dynamically update object transforms from PoseArray inputs linked to ArUco marker detection.</p> Read More \u2192 Using Lula Description Editor for IK <p>July 3, 2025</p> <p>Set up a custom robot in Isaac Sim using Lula Description Editor and solve inverse kinematics.</p> Read More \u2192 Synthetic Data Generation in Isaac Sim <p>July 3, 2025</p> <p>End-to-end pipeline for generating annotated datasets with domain randomization and export tools.</p> Read More \u2192 Synthetic Data Extension <p>July 3, 2025</p> <p>Isaac Sim extension for automated data capture and export pipeline generation.</p> Read More \u2192 UI Template Extension <p>July 3, 2025</p> <p>A base Isaac Sim extension template with UI panel, buttons, and layout for rapid prototyping.</p> Read More \u2192 Connect Robotiq &amp; RG2 Gripper to UR5e <p>July 6, 2025</p> <p>Learn how to import, position, and attach both Robotiq 2F-85 and RG2 grippers to the UR5e arm in Isaac Sim.</p> Read More \u2192"},{"location":"blog/post1/","title":"Getting Started with IsaacStack","text":"<p>July 2, 2025 \u00a0\u00a0 Aldrin Inbaraj</p> <p>Welcome to IsaacStack \u2014 a curated resource for Isaac Sim and Isaac Lab developers.</p> <p>This site hosts:</p> <ul> <li>Minimal code snippets</li> <li>Tested extensions</li> <li>Downloadable assets</li> <li>Walkthroughs and workflows</li> </ul> <p>Read on to set up your local environment and begin using this site.</p> <p>...</p>"},{"location":"snippets/action-graph/camera/","title":"Camera","text":""},{"location":"snippets/action-graph/camera/#code-to-set-action-graph-to-publish-a-camera-topic","title":"Code to set action graph to publish a camera topic","text":"<pre><code>import omni.graph.core as og\n\n# =============== CONFIGURATION ===============\nCAMERA_PRIM = \"/World/UR5e/Gripper/rsd455_camera\"\nIMAGE_WIDTH = 640\nIMAGE_HEIGHT = 480\nROS2_TOPIC = \"isometric_camera_rgb\"\n# =============================================\n\ndef create_camera_ros2_actiongraph():\n    \"\"\"Create ActionGraph for camera ROS2 publishing\"\"\"\n\n    graph_path = \"/World/ActionGraph_01\"\n\n    print(f\"Creating ActionGraph: {graph_path}\")\n    print(f\"Camera: {CAMERA_PRIM}\")\n    print(f\"Resolution: {IMAGE_WIDTH}x{IMAGE_HEIGHT}\")\n    print(f\"ROS2 Topic: {ROS2_TOPIC}\")\n\n    # Create ActionGraph\n    try:\n        og.Controller.create_graph(graph_path)\n        print(f\"Created ActionGraph at {graph_path}\")\n    except Exception:\n        print(f\"ActionGraph already exists at {graph_path}\")\n\n    # Create nodes\n    nodes = [\n        (\"on_playback_tick\", \"omni.graph.action.OnPlaybackTick\"),\n        (\"isaac_run_one_simulation_frame\", \"omni.isaac.core_nodes.OgnIsaacRunOneSimulationFrame\"),\n        (\"isaac_create_render_product\", \"omni.isaac.core_nodes.IsaacCreateRenderProduct\"),\n        (\"ros2_context\", \"omni.isaac.ros2_bridge.ROS2Context\"),\n        (\"ros2_camera_helper\", \"omni.isaac.ros2_bridge.ROS2CameraHelper\"),\n    ]\n\n    print(\"\\nCreating nodes...\")\n    for node_name, node_type in nodes:\n        try:\n            node_path = f\"{graph_path}/{node_name}\"\n            og.Controller.create_node(node_path, node_type)\n            print(f\"Created {node_name}\")\n        except Exception as e:\n            print(f\"Node {node_name} already exists\")\n\n    # Set node attributes\n    print(\"\\nConfiguring nodes...\")\n\n    # Configure render product\n    try:\n        og.Controller.attribute(f\"{graph_path}/isaac_create_render_product.inputs:cameraPrim\").set([CAMERA_PRIM])\n        og.Controller.attribute(f\"{graph_path}/isaac_create_render_product.inputs:width\").set(IMAGE_WIDTH)\n        og.Controller.attribute(f\"{graph_path}/isaac_create_render_product.inputs:height\").set(IMAGE_HEIGHT)\n        og.Controller.attribute(f\"{graph_path}/isaac_create_render_product.inputs:enabled\").set(True)\n        print(f\"Configured render product: {CAMERA_PRIM} @ {IMAGE_WIDTH}x{IMAGE_HEIGHT}\")\n    except Exception as e:\n        print(f\"Error configuring render product: {e}\")\n\n    # Configure ROS2 camera helper\n    try:\n        og.Controller.attribute(f\"{graph_path}/ros2_camera_helper.inputs:topicName\").set(ROS2_TOPIC)\n        og.Controller.attribute(f\"{graph_path}/ros2_camera_helper.inputs:frameId\").set(\"camera_link\")\n        og.Controller.attribute(f\"{graph_path}/ros2_camera_helper.inputs:type\").set(\"rgb\")\n        og.Controller.attribute(f\"{graph_path}/ros2_camera_helper.inputs:enabled\").set(True)\n        og.Controller.attribute(f\"{graph_path}/ros2_camera_helper.inputs:queueSize\").set(10)\n        print(f\"Configured ROS2 helper: topic={ROS2_TOPIC}\")\n    except Exception as e:\n        print(f\"Error configuring ROS2 helper: {e}\")\n\n    # Create connections\n    print(\"\\nConnecting nodes...\")\n    connections = [\n        (\"on_playback_tick.outputs:tick\", \"isaac_run_one_simulation_frame.inputs:execIn\"),\n        (\"isaac_run_one_simulation_frame.outputs:step\", \"isaac_create_render_product.inputs:execIn\"),\n        (\"isaac_create_render_product.outputs:execOut\", \"ros2_camera_helper.inputs:execIn\"),\n        (\"isaac_create_render_product.outputs:renderProductPath\", \"ros2_camera_helper.inputs:renderProductPath\"),\n        (\"ros2_context.outputs:context\", \"ros2_camera_helper.inputs:context\"),\n    ]\n\n    for source, target in connections:\n        try:\n            og.Controller.connect(f\"{graph_path}/{source}\", f\"{graph_path}/{target}\")\n            print(f\"Connected {source.split('.')[0]} -&gt; {target.split('.')[0]}\")\n        except Exception as e:\n            print(f\"Failed to connect {source} -&gt; {target}: {e}\")\n\n    print(\"\\nActionGraph created successfully!\")\n\nif __name__ == \"__main__\":\n    print(\"Creating Camera ROS2 ActionGraph...\")\n    print(\"=\" * 50)\n    create_camera_ros2_actiongraph()\n</code></pre>"},{"location":"snippets/camera/create/","title":"Create","text":""},{"location":"snippets/camera/create/#create-camera-top-down","title":"Create Camera top down","text":"<pre><code>import omni.isaac.core.utils.numpy.rotations as rot_utils\nfrom omni.isaac.sensor import Camera\nimport numpy as np\n\ndef create_topdown_camera(x, y, z, name=\"topdown_camera\"):\n    camera = Camera(\n        prim_path=f\"/World/{name}\",\n        position=np.array([x, y, z]),\n        frequency=30,\n        resolution=(640, 480),\n        orientation=rot_utils.euler_angles_to_quats(\n            np.array([0, 90, 0]), degrees=True\n        ),\n    )\n    camera.initialize()\n    camera.add_motion_vectors_to_frame()\n    print(f\"Top-down camera created at ({x}, {y}, {z})\")\n    return camera\n\n# Use it:\ncamera = create_topdown_camera(0, 0, 5)  # Above origin at height 5\n</code></pre>"},{"location":"snippets/camera/create/#create-camera-isometric-view","title":"Create Camera Isometric view","text":"<pre><code>from omni.isaac.sensor import Camera\nimport omni.usd\nfrom pxr import Gf\nimport numpy as np\n\n# Create basic camera first\ncamera = Camera(\n    prim_path=\"/World/isometric_camera\",\n    position=np.array([0, 0, 0]),  # We'll set position via USD\n    frequency=30,\n    resolution=(640, 480),\n)\ncamera.initialize()\n\n# Set exact transform values via USD attributes\nstage = omni.usd.get_context().get_stage()\ncamera_prim = stage.GetPrimAtPath(\"/World/isometric_camera\")\n\n# Set exact position\ncamera_prim.GetAttribute(\"xformOp:translate\").Set(Gf.Vec3d(2.3, 3.2, 1.3))\n\n# Set exact quaternion (w, x, y, z order for USD)\ncamera_prim.GetAttribute(\"xformOp:orient\").Set(Gf.Quatd(0.25624, 0.19434, 0.57219, 0.75443))\n</code></pre>"},{"location":"snippets/camera/import/","title":"Import","text":""},{"location":"snippets/camera/import/#import-intelrealses-d455","title":"Import Intelrealses D455","text":"<pre><code>import os\nfrom omni.isaac.core.utils.stage import add_reference_to_stage\n\n# Import a USD file as a prim\nusd_path = \"omniverse://localhost/NVIDIA/Assets/Isaac/4.5/Isaac/Sensors/Intel/RealSense/rsd455.usd\"  # Change this to your USD path\nfilename = os.path.splitext(os.path.basename(usd_path))[0]\nprim_path = f\"/World/{filename}\" # Auto-name the prim using filename\n\nadd_reference_to_stage(usd_path=usd_path, prim_path=prim_path)\nprint(f\"Prim imported at {prim_path}\")\n</code></pre>"},{"location":"snippets/camera/import/#calibrate-camera","title":"Calibrate Camera","text":""},{"location":"snippets/camera/move/","title":"Move","text":""},{"location":"snippets/camera/move/#move-camera","title":"Move camera","text":"<pre><code>import omni.usd\nfrom pxr import Gf\n\ndef move_camera(camera_prim_path, x, y, z):\n    \"\"\"\n    Move camera to new position using xformOp:translate\n\n    Args:\n        camera_prim_path: USD path to camera (e.g. \"/World/topdown_camera\")\n        x, y, z: New position coordinates\n    \"\"\"\n    stage = omni.usd.get_context().get_stage()\n    camera_prim = stage.GetPrimAtPath(camera_prim_path)\n\n    if camera_prim:\n        camera_prim.GetAttribute(\"xformOp:translate\").Set(Gf.Vec3d(x, y, z))\n        print(f\"Camera moved to ({x}, {y}, {z})\")\n    else:\n        print(f\"Camera not found at {camera_prim_path}\")\n\ndef rotate_camera(camera_prim_path, w, x, y, z):\n    \"\"\"\n    Rotate camera using xformOp:orient quaternion\n\n    Args:\n        camera_prim_path: USD path to camera\n        w, x, y, z: Quaternion components (w is real part)\n    \"\"\"\n    stage = omni.usd.get_context().get_stage()\n    camera_prim = stage.GetPrimAtPath(camera_prim_path)\n\n    if camera_prim:\n        camera_prim.GetAttribute(\"xformOp:orient\").Set(Gf.Quatd(w, x, y, z))\n        print(f\"\u2713 Camera orientation set to ({w}, {x}, {y}, {z})\")\n    else:\n        print(f\"Camera not found at {camera_prim_path}\")\n\ndef rotate_camera_degrees(camera_prim_path, roll, pitch, yaw):\n    \"\"\"\n    Rotate camera using degrees (roll, pitch, yaw)\n\n    Args:\n        camera_prim_path: USD path to camera\n        roll, pitch, yaw: Rotation in degrees\n    \"\"\"\n    import math\n\n    # Convert degrees to radians\n    roll_rad = math.radians(roll)\n    pitch_rad = math.radians(pitch)\n    yaw_rad = math.radians(yaw)\n\n    # Convert Euler angles to quaternion\n    cy = math.cos(yaw_rad * 0.5)\n    sy = math.sin(yaw_rad * 0.5)\n    cp = math.cos(pitch_rad * 0.5)\n    sp = math.sin(pitch_rad * 0.5)\n    cr = math.cos(roll_rad * 0.5)\n    sr = math.sin(roll_rad * 0.5)\n\n    w = cr * cp * cy + sr * sp * sy\n    x = sr * cp * cy - cr * sp * sy\n    y = cr * sp * cy + sr * cp * sy\n    z = cr * cp * sy - sr * sp * cy\n\n    stage = omni.usd.get_context().get_stage()\n    camera_prim = stage.GetPrimAtPath(camera_prim_path)\n\n    if camera_prim:\n        camera_prim.GetAttribute(\"xformOp:orient\").Set(Gf.Quatd(w, x, y, z))\n        print(f\"Camera rotated: roll={roll}\u00b0, pitch={pitch}\u00b0, yaw={yaw}\u00b0\")\n    else:\n        print(f\"Camera not found at {camera_prim_path}\")\n\ndef set_focal_length(camera_prim_path, focal_length):\n    \"\"\"\n    Set camera focal length\n\n    Args:\n        camera_prim_path: USD path to camera\n        focal_length: Focal length in mm (float)\n    \"\"\"\n    stage = omni.usd.get_context().get_stage()\n    camera_prim = stage.GetPrimAtPath(camera_prim_path)\n\n    if camera_prim:\n        camera_prim.GetAttribute(\"focalLength\").Set(float(focal_length))\n        print(f\"Focal length set to {focal_length}mm\")\n    else:\n        print(f\"Camera not found at {camera_prim_path}\")\n\nif __name__ == \"__main__\":\n    camera_path = \"/World/topdown_camera\"  # Change this to your camera path\n\n    # Move camera\n    move_camera(camera_path, 2, 3, 5)\n\n    # Set focal length to 35mm\n    set_focal_length(camera_path, 35.0)\n\n    # Top-down orientation using degrees (default camera orientation)\n    rotate_camera_degrees(camera_path, 0, 0, 0)  # 0,0,0 = looking down\n</code></pre>"},{"location":"snippets/camera/move/#point-towards-an-object-with-a-set-focal-distance","title":"Point towards an object with a set focal distance","text":""},{"location":"snippets/camera/publish/","title":"Publish","text":""},{"location":"snippets/camera/publish/#publish-camera-view-as-ros-2-topic","title":"Publish Camera View as ROS 2 Topic","text":"<p>Learn how to publish camera data from Isaac Sim to ROS 2 using native bridges.</p> <p>Isaac Sim Tutorial \u2014 ROS 2 Camera topic publish</p> <p>Isaac Sim Tutorial \u2014 ROS2 Camera RGB, Depth, Pointcloud</p>"},{"location":"snippets/camera/robotic-arm/","title":"Robotic Arm","text":""},{"location":"snippets/camera/robotic-arm/#attach-to-ur5e-robotic-arm","title":"Attach to UR5e robotic arm","text":"<p>Import your UR5e before hand</p> <pre><code>import omni.kit.commands\nfrom pxr import Gf\n\n# Move the prim\nomni.kit.commands.execute('MovePrim',\n                         path_from=\"/World/rsd455\",\n                         path_to=\"/World/UR5e/wrist_3_link/rsd455\")\n\n# Set transform properties\nomni.kit.commands.execute('ChangeProperty',\n                         prop_path=\"/World/UR5e/wrist_3_link/rsd455.xformOp:translate\",\n                         value=Gf.Vec3d(-0.012, -0.06, -0.01),\n                         prev=None)\n\nomni.kit.commands.execute('ChangeProperty',\n                         prop_path=\"/World/UR5e/wrist_3_link/rsd455.xformOp:rotateXYZ\",\n                         value=Gf.Vec3d(0, 270, 90),\n                         prev=None)\n</code></pre>"},{"location":"snippets/gripper/connect-arm/","title":"Connect Gripper to Arm","text":""},{"location":"snippets/gripper/connect-arm/#connect-robotiq-2f-85-to-ur5e","title":"Connect Robotiq 2F-85 to UR5e","text":"<p>Import UR5e version from IsaacSim Assets 4.2 version as sublayer(insert link to usd) omniverse://localhost/NVIDIA/Assets/Isaac/4.2/Isaac/Robots/UniversalRobots/ur5e/ur5e.usd <pre><code># Attach Robotiq Gripper to UR5e\nimport omni.usd\nfrom pxr import Sdf, Gf\n\nstage = omni.usd.get_context().get_stage()\n\ntool0_prim_path = \"/ur5e/tool0\"\ngripper_prim_path = \"/Robotiq_2F_85\"\nflange_tool_path = \"/ur5e/flange/flange_tool0\"\n\ntool0_prim = stage.GetPrimAtPath(tool0_prim_path)\ngripper_prim = stage.GetPrimAtPath(gripper_prim_path)\nflange_tool_prim = stage.GetPrimAtPath(flange_tool_path)\n\nif not tool0_prim or not gripper_prim:\n    print(\"Could not find tool0 or Robotiq gripper\")\nelse:\n    # Attach transform attributes\n    translate_attr = tool0_prim.GetAttribute(\"xformOp:translate\")\n    orient_attr = tool0_prim.GetAttribute(\"xformOp:orient\")\n\n    if translate_attr.IsValid() and orient_attr.IsValid():\n        gripper_prim.CreateAttribute(\"xformOp:translate\", Sdf.ValueTypeNames.Double3).Set(translate_attr.Get())\n        gripper_prim.CreateAttribute(\"xformOp:orient\", Sdf.ValueTypeNames.Quatd).Set(orient_attr.Get())\n        print(\"Gripper attached to tool0 transform.\")\n    else:\n        print(\"Could not get valid attributes for transform.\")\n\n    # Set gripper orientation: x=-90\u00b0, y=90\u00b0, z=0\u00b0\n    rotate_attr = gripper_prim.CreateAttribute(\"xformOp:rotateXYZ\", Sdf.ValueTypeNames.Float3, custom=True)\n    rotate_attr.Set(Gf.Vec3f(-90.0, 90.0, 0.0))  # XYZ rotation in degrees\n    print(\"Set gripper orientation: x=-90\u00b0, y=90\u00b0, z=0\u00b0\")\n\n    # Set physics:body1 relationship\n    if flange_tool_prim:\n        body1_rel = flange_tool_prim.GetRelationship(\"physics:body1\")\n        if body1_rel:\n            body1_rel.SetTargets([Sdf.Path(\"/Robotiq_2F_85/robotiq_arg2f_base_link\")])\n            print(\"Body1 target set to /Robotiq_2F_85/robotiq_arg2f_base_link.\")\n        else:\n            print(\"Failed to find or set the body1 relationship.\")\n    else:\n        print(\"Flange tool prim not found.\")\n\nprint(\"Robotiq gripper attachment complete\")\n</code></pre></p>"},{"location":"snippets/gripper/connect-arm/#connect-rg2-to-ur5e","title":"Connect RG2 to UR5e","text":"<p>Import UR5e version from IsaacSim Assets 4.5 version (insert link to usd) omniverse://localhost/NVIDIA/Assets/Isaac/4.5/Isaac/Robots/UniversalRobots/ur5e/ur5e.usd <pre><code>import omni.usd\nfrom pxr import Usd, Sdf, UsdGeom, Gf\nimport math\n\nstage = omni.usd.get_context().get_stage()\nur5e_gripper_path = \"/World/UR5e/Gripper\"\nrg2_path = \"/RG2_Gripper\"\njoint_path = \"/World/UR5e/joints/robot_gripper_joint\"\nrg2_base_link = \"/RG2_Gripper/onrobot_rg2_base_link\"\n\nur5e_prim = stage.GetPrimAtPath(ur5e_gripper_path)\nrg2_prim = stage.GetPrimAtPath(rg2_path)\njoint_prim = stage.GetPrimAtPath(joint_path)\n\nif not ur5e_prim or not rg2_prim:\n    print(\"Error: UR5e or RG2 gripper prim not found.\")\nelse:\n    # Copy transforms from UR5e gripper to RG2\n    translate_attr = ur5e_prim.GetAttribute(\"xformOp:translate\")\n    orient_attr = ur5e_prim.GetAttribute(\"xformOp:orient\")\n\n    if translate_attr.IsValid() and orient_attr.IsValid():\n        rg2_prim.CreateAttribute(\"xformOp:translate\", Sdf.ValueTypeNames.Double3).Set(translate_attr.Get())\n        rg2_prim.CreateAttribute(\"xformOp:orient\", Sdf.ValueTypeNames.Quatd).Set(orient_attr.Get())\n\n    # --------- 1. Set orientation for RG2 Gripper ---------\n    print(\"Setting RG2 gripper orientation...\")\n    if rg2_prim.IsValid():\n        quat_attr = rg2_prim.CreateAttribute(\"xformOp:orient\", Sdf.ValueTypeNames.Quatd, custom=True)\n        quat_attr.Set(Gf.Quatd(0.70711, Gf.Vec3d(-0.70711, 0.0, 0.0)))\n        print(\" Set xformOp:orient for RG2 gripper.\")\n    else:\n        print(f\" Gripper not found at {rg2_path}\")\n\n    # Create or update the physics joint\n    if not joint_prim:\n        joint_prim = stage.DefinePrim(joint_path, \"PhysicsFixedJoint\")\n\n    joint_prim.CreateRelationship(\"physics:body1\").SetTargets([Sdf.Path(rg2_base_link)])\n    joint_prim.CreateAttribute(\"physics:jointEnabled\", Sdf.ValueTypeNames.Bool).Set(True)\n    joint_prim.CreateAttribute(\"physics:excludeFromArticulation\", Sdf.ValueTypeNames.Bool).Set(True)\n\n    # --------- 2. Set localRot0 and localRot1 for joint ---------\n    print(\"Setting joint rotation parameters...\")\n    if joint_prim.IsValid():\n        def euler_to_quatf(x_deg, y_deg, z_deg):\n            \"\"\"Convert Euler angles (XYZ order, degrees) to Gf.Quatf\"\"\"\n            rx = Gf.Quatf(math.cos(math.radians(x_deg) / 2), Gf.Vec3f(1, 0, 0) * math.sin(math.radians(x_deg) / 2))\n            ry = Gf.Quatf(math.cos(math.radians(y_deg) / 2), Gf.Vec3f(0, 1, 0) * math.sin(math.radians(y_deg) / 2))\n            rz = Gf.Quatf(math.cos(math.radians(z_deg) / 2), Gf.Vec3f(0, 0, 1) * math.sin(math.radians(z_deg) / 2))\n            return rx * ry * rz  # Apply in XYZ order\n\n        # Set the rotation quaternions for proper joint alignment\n        quat0 = euler_to_quatf(-90, 0, -90)\n        quat1 = euler_to_quatf(-180, 90, 0)\n\n        joint_prim.CreateAttribute(\"physics:localRot0\", Sdf.ValueTypeNames.Quatf, custom=True).Set(quat0)\n        joint_prim.CreateAttribute(\"physics:localRot1\", Sdf.ValueTypeNames.Quatf, custom=True).Set(quat1)\n        print(\" Set physics:localRot0 and localRot1 for robot_gripper_joint.\")\n    else:\n        print(f\" Joint not found at {joint_path}\")\n\n    print(\"RG2 successfully attached to UR5e with proper orientation and joint configuration.\")\n</code></pre></p>"},{"location":"snippets/gripper/import-gripper/","title":"Import Gripper","text":""},{"location":"snippets/gripper/import-gripper/#import-robotiq-2f-85-gripper","title":"Import Robotiq 2f-85 Gripper","text":"<p>Tutorial on how to rig Robotiq2f-85 gripper ../tutorials/post5.md</p> <p>Download Robotiq 2F-85</p> <pre><code>from omni.isaac.core.utils.stage import add_reference_to_stage\n\nrg2_usd_path = \"omniverse://localhost/Library/Robotiq_2F_85.usd\"\nadd_reference_to_stage(rg2_usd_path, \"/Robotiq_2F_85_Gripper\")\nprint(\"RG2 Gripper imported at /Robotiq_2F_85_Gripper\")\n</code></pre>"},{"location":"snippets/gripper/import-gripper/#import-robotiq-2f-85-gripper-from-root-layer-in-a-usd-file","title":"Import Robotiq 2f-85 Gripper from root layer in a usd file","text":"<pre><code># Import and Control Robotiq Gripper\nimport omni.usd\nfrom pxr import UsdPhysics, Sdf\n\nstage = omni.usd.get_context().get_stage()\n\n# Import gripper (only if not already imported)\nsublayer_path = \"omniverse://localhost/Library/Robotiq_2F_85.usd\"\nroot_layer = stage.GetRootLayer()\n\nif sublayer_path not in root_layer.subLayerPaths:\n    root_layer.subLayerPaths.append(sublayer_path)\n    print(\"Robotiq gripper imported\")\nelse:\n    print(\"Robotiq gripper already imported\")\n</code></pre>"},{"location":"snippets/gripper/import-gripper/#import-robotiq-2f-85-and-open-close-gripper","title":"Import Robotiq 2f-85 and Open Close gripper","text":"<pre><code># Import and Control Robotiq Gripper\nimport omni.usd\nfrom pxr import UsdPhysics, Sdf\n\nstage = omni.usd.get_context().get_stage()\n\ndef control_robotiq_gripper(action=\"open\"):\n    \"\"\"Control Robotiq gripper: 'open' or 'close'\"\"\"\n    knuckle_joint_path = \"/Robotiq_2F_85_Gripper/robotiq_arg2f_base_link/right_outer_knuckle_joint\"\n    finger_joint_path = \"/Robotiq_2F_85_Gripper/robotiq_arg2f_base_link/finger_joint\"\n\n    knuckle_joint = stage.GetPrimAtPath(knuckle_joint_path)\n    finger_joint = stage.GetPrimAtPath(finger_joint_path)\n\n    if not knuckle_joint or not finger_joint:\n        print(\"Gripper joints not found.\")\n        return\n\n    velocity = -50.0 if action == \"open\" else 50.0\n\n    for joint in [knuckle_joint, finger_joint]:\n        drive = UsdPhysics.DriveAPI.Apply(joint, \"angular\")\n        drive.CreateTargetVelocityAttr(velocity)\n\n    print(f\"Robotiq gripper {action}ed with velocity {velocity}\")\n\n# Examples:\ncontrol_robotiq_gripper('close')  # Close gripper\n# control_robotiq_gripper(\"open\")   # Open gripper\n</code></pre>"},{"location":"snippets/gripper/import-gripper/#import-rg2-gripper","title":"Import RG2 Gripper","text":"<p>Tutorial on how to rig RG2 gripper ../tutorials/post3.md</p> <p>Download RG2 Gripper</p> <pre><code>from omni.isaac.core.utils.stage import add_reference_to_stage\n\nrg2_usd_path = \"omniverse://localhost/Library/RG2.usd\"\nadd_reference_to_stage(rg2_usd_path, \"/RG2_Gripper\")\nprint(\"RG2 Gripper imported at /RG2_Gripper\")\n</code></pre>"},{"location":"snippets/gripper/import-gripper/#import-rg2-and-open-close-gripper","title":"Import RG2 and Open Close gripper","text":"<pre><code>from omni.isaac.core.utils.stage import add_reference_to_stage\nfrom omni.isaac.core.articulations import ArticulationView\nfrom omni.isaac.core.world import World\nfrom omni.isaac.core.utils.types import ArticulationActions\nimport numpy as np\nimport omni.usd\n\n# Check if gripper already exists in scene\nstage = omni.usd.get_context().get_stage()\nrg2_exists = stage.GetPrimAtPath(\"/RG2_Gripper\").IsValid()\n\nif not rg2_exists:\n    # Import gripper only if it doesn't exist\n    rg2_usd_path = \"omniverse://localhost/Library/RG2.usd\"\n    add_reference_to_stage(rg2_usd_path, \"/RG2_Gripper\")\n    print(\"RG2 Gripper imported\")\nelse:\n    print(\"RG2 Gripper already exists in scene\")\n\n# Setup gripper control (finds existing gripper)\ngripper_view = None\ntry:\n    gripper_view = World.instance().scene.get_object(\"RG2_Gripper_View\")\n    if gripper_view is not None:\n        print(\"Using existing gripper view\")\n    else:\n        raise Exception(\"Gripper view not found\")\nexcept:\n    gripper_view = ArticulationView(prim_paths_expr=\"/RG2_Gripper\", name=\"RG2_Gripper_View\")\n    World.instance().scene.add(gripper_view)\n    print(\"Created new gripper view\")\n\n# Initialize gripper view\nif gripper_view is not None:\n    gripper_view.initialize()\n    print(\"Gripper view initialized\")\nelse:\n    print(\"Error: Failed to create gripper view\")\n    exit()\n\ndef control_gripper(width_mm):\n    \"\"\"Control gripper: 0mm=closed, 110mm=open\"\"\"\n    joint_angle = -np.pi/4 + (width_mm/110.0) * (np.pi/6 + np.pi/4)\n    target_positions = np.array([joint_angle, joint_angle])\n    action = ArticulationActions(joint_positions=target_positions, joint_indices=np.array([0, 1]))\n    gripper_view.apply_action(action)\n    print(f\"Gripper set to {width_mm}mm\")\n\n# Examples (uncomment to use):\ncontrol_gripper(0)    # Close gripper\n# control_gripper(110)  # Open gripper\n# control_gripper(55)   # Half open\n</code></pre>"},{"location":"snippets/robot-arm/fk-control/","title":"FK Control","text":"<p>articulation.apply_action(action) articulation.set_joint_positions(     action.joint_positions,     joint_indices=action.joint_indices )</p>"},{"location":"snippets/robot-arm/fk-control/#import-ur5e-and-perform-forward-kinematics-articulation-set-joints","title":"Import UR5e and perform forward kinematics (Articulation set joints)","text":"<pre><code>import omni.usd\nfrom omni.isaac.core.world import World\nfrom omni.isaac.core.utils.stage import add_reference_to_stage\nfrom omni.isaac.core.articulations import Articulation\n\n# CHANGE THESE VALUES AND RERUN\njoint_angles_deg = [30, -30, 45, -60, 30, 0]  # degrees\njoint_angles = [x * 3.14159/180 for x in joint_angles_deg]  # convert to radians\n#joint_angles = [0.5, -0.5, 0.8, -1.0, 0.5, 0.0]  #for radians\n\n# Check if robot already exists\nstage = omni.usd.get_context().get_stage()\nprim = stage.GetPrimAtPath(\"/World/UR5e\")\n\nif not prim.IsValid():\n    # First time - load everything\n    world = World()\n    world.scene.add_default_ground_plane()\n\n    asset_path = \"omniverse://localhost/NVIDIA/Assets/Isaac/4.5/Isaac/Robots/UniversalRobots/ur5e/ur5e.usd\"\n    add_reference_to_stage(usd_path=asset_path, prim_path=\"/World/UR5e\")\n    world.reset()\n    print(\"Robot loaded for first time\")\n\n# Apply joint positions\narticulation = Articulation(\"/World/UR5e\")\narticulation.initialize()\narticulation.set_joint_positions(joint_angles)\n\nprint(f\"Applied joint angles: {joint_angles}\")\nposition, orientation = articulation.get_world_pose()\nprint(f\"End-effector position: [{position[0]:.3f}, {position[1]:.3f}, {position[2]:.3f}]\")\n</code></pre>"},{"location":"snippets/robot-arm/fk-control/#import-ur5e-and-perform-forward-kinematics-articulation-apply-action","title":"Import UR5e and perform forward kinematics (Articulation apply action)","text":"<pre><code>import numpy as np\nimport omni.usd\nfrom omni.isaac.core.world import World\nfrom omni.isaac.core.utils.stage import add_reference_to_stage\nfrom omni.isaac.core.articulations import Articulation\nfrom omni.isaac.core.utils.types import ArticulationAction\nfrom omni.isaac.nucleus import get_assets_root_path\n\n# Set joint angles in degrees (CHANGE HERE)\njoint_angles_deg = [0, -45, 0, 0, 0, 0]  # degrees\njoint_angles = [np.deg2rad(x) for x in joint_angles_deg]  # convert to radians\n\n# Load USD stage\nstage = omni.usd.get_context().get_stage()\nprim = stage.GetPrimAtPath(\"/World/UR5e\")\n\nif not prim.IsValid():\n    # First-time setup\n    world = World()\n    world.scene.add_default_ground_plane()\n\n    # Load UR5e asset\n    try:\n        asset_path = \"omniverse://localhost/NVIDIA/Assets/Isaac/4.5/Isaac/Robots/UniversalRobots/ur5e/ur5e.usd\"\n        add_reference_to_stage(usd_path=asset_path, prim_path=\"/World/UR5e\")\n    except:\n        fallback_path = get_assets_root_path() + \"/Isaac/Robots/UniversalRobots/ur5e/ur5e.usd\"\n        add_reference_to_stage(usd_path=fallback_path, prim_path=\"/World/UR5e\")\n\n    world.reset()\n    print(\"UR5e robot loaded.\")\n\n# Control using Articulation only\narticulation = Articulation(\"/World/UR5e\")\narticulation.initialize()\naction = ArticulationAction(joint_positions=np.array(joint_angles, dtype=np.float32))\narticulation.apply_action(action)\n\n# Report results\nprint(f\"Applied joint angles (degrees): {joint_angles_deg}\")\nprint(f\"Applied joint angles (radians): {joint_angles}\")\n\n# Get EE pose\nposition, orientation = articulation.get_world_pose()\nprint(f\"End-effector position: [{position[0]:.3f}, {position[1]:.3f}, {position[2]:.3f}]\")\n</code></pre>"},{"location":"snippets/robot-arm/fk-control/#import-ur5e-and-perform-forward-kinematics-articulationview-apply-action","title":"Import UR5e and perform forward kinematics (ArticulationView apply action)","text":"<pre><code>import numpy as np\nfrom omni.isaac.core.world import World\nfrom omni.isaac.core.utils.stage import add_reference_to_stage\nfrom omni.isaac.core.articulations import ArticulationView\nfrom omni.isaac.core.utils.types import ArticulationActions\nfrom omni.isaac.nucleus import get_assets_root_path\nimport omni.usd\n\n# Change these joint angles (degrees) and run the script again\njoint_angles_deg = [0, 0, 0, 0, 0, 0]\n\n# Setup (only runs once)\nstage = omni.usd.get_context().get_stage()\nif not stage.GetPrimAtPath(\"/World/UR5e\").IsValid():\n    world = World()\n    world.scene.add_default_ground_plane()\n    asset_path = get_assets_root_path() + \"/Isaac/Robots/UniversalRobots/ur5e/ur5e.usd\"\n    add_reference_to_stage(usd_path=asset_path, prim_path=\"/World/UR5e\")\n    world.reset()\n\n# Move robot\nur5e_view = World.instance().scene.get_object(\"ur5e_view\")\nif ur5e_view is None:\n    ur5e_view = ArticulationView(prim_paths_expr=\"/World/UR5e\", name=\"ur5e_view\")\n    World.instance().scene.add(ur5e_view)\n    ur5e_view.initialize()\n\n# Apply joint positions using ArticulationActions\njoint_positions_array = np.array(np.radians(joint_angles_deg), dtype=np.float32)\naction = ArticulationActions(joint_positions=joint_positions_array)\nur5e_view.apply_action(action)\nprint(f\"Moved to: {joint_angles_deg}\")\n</code></pre>"},{"location":"snippets/robot-arm/ik-control/","title":"IK Control","text":""},{"location":"snippets/robot-arm/ik-control/#inverse-kinematics-with-articulation-set_joint_positions","title":"Inverse Kinematics with Articulation (set_joint_positions)","text":"<pre><code>import omni.usd\nimport numpy as np\nimport os\nfrom omni.isaac.core.world import World\nfrom omni.isaac.core.utils.stage import add_reference_to_stage\nfrom omni.isaac.core.articulations import Articulation\nfrom omni.isaac.motion_generation import LulaKinematicsSolver, ArticulationKinematicsSolver\nfrom omni.isaac.core.utils.numpy.rotations import euler_angles_to_quats\n\n# CHANGE THESE VALUES AND RERUN\ntarget_pos = [0.1, 0.1, 0.9]      # X, Y, Z position\ntarget_rot_deg = [0, 0, 0]       # Roll, Pitch, Yaw in degrees\ntarget_rot = [x * 3.14159/180 for x in target_rot_deg]  # convert to radians\n\n# Check if robot already exists\nstage = omni.usd.get_context().get_stage()\nprim = stage.GetPrimAtPath(\"/World/UR5e\")\n\nif not prim.IsValid():\n    # First time - load everything\n    from omni.isaac.core.utils.physics import simulate_async\n    world = World()\n    world.scene.add_default_ground_plane()\n\n    asset_path = \"omniverse://localhost/NVIDIA/Assets/Isaac/4.5/Isaac/Robots/UniversalRobots/ur5e/ur5e.usd\"\n    add_reference_to_stage(usd_path=asset_path, prim_path=\"/World/UR5e\")\n\n    # Enable physics scene first\n    from omni.physx import get_physx_interface\n    get_physx_interface().start_simulation()\n\n    world.reset()\n    print(\"Robot loaded for first time\")\n\n# Load IK solver\nhome_dir = os.getenv(\"HOME\")\npkg_dir = os.path.join(home_dir, \".local\", \"share\", \"ov\", \"pkg\")\nisaac_sim_versions = [d for d in os.listdir(pkg_dir) if d.startswith(\"isaac-sim-\")]\nisaac_sim_version = isaac_sim_versions[0]\nbase_path = os.path.join(pkg_dir, isaac_sim_version, \"exts\", \"omni.isaac.motion_generation\")\nrobot_description_path = os.path.join(base_path, \"motion_policy_configs\", \"universal_robots\", \"ur5e\", \"rmpflow\", \"ur5e_robot_description.yaml\")\nurdf_path = os.path.join(base_path, \"motion_policy_configs\", \"universal_robots\", \"ur5e\", \"ur5e.urdf\")\n\nik_solver = LulaKinematicsSolver(robot_description_path=robot_description_path, urdf_path=urdf_path)\n\n# Solve IK\narticulation = Articulation(\"/World/UR5e\")\narticulation.initialize()\narticulation_ik_solver = ArticulationKinematicsSolver(articulation, ik_solver, \"tool0\")\n\ntarget_position = np.array(target_pos, dtype=np.float32)\ntarget_orientation = np.array(euler_angles_to_quats(target_rot), dtype=np.float32)\n\naction, success = articulation_ik_solver.compute_inverse_kinematics(target_position, target_orientation)\n\nif success:\n    articulation.set_joint_positions(\n        action.joint_positions,\n        joint_indices=action.joint_indices\n    )\n    print(f\"IK Success! Target: {target_pos}, {target_rot}\")\n    print(f\"Joint angles: {action.joint_positions}\")\nelse:\n    print(f\"IK Failed for target: {target_pos}, {target_rot}\")\n</code></pre>"},{"location":"snippets/robot-arm/ik-control/#inverse-kinematics-with-articulation-apply_action","title":"Inverse Kinematics with Articulation (apply_action)","text":"<pre><code>import omni.usd\nimport numpy as np\nimport os\nfrom omni.isaac.core.world import World\nfrom omni.isaac.core.utils.stage import add_reference_to_stage\nfrom omni.isaac.core.articulations import Articulation\nfrom omni.isaac.motion_generation import LulaKinematicsSolver, ArticulationKinematicsSolver\nfrom omni.isaac.core.utils.numpy.rotations import euler_angles_to_quats\n\n# CHANGE THESE VALUES AND RERUN\ntarget_pos = [0.5, 0.5, 0.5]      # X, Y, Z position\ntarget_rot_deg = [0, 0, 0]       # Roll, Pitch, Yaw in degrees\ntarget_rot = [x * 3.14159/180 for x in target_rot_deg]  # convert to radians\n\n# Check if robot already exists\nstage = omni.usd.get_context().get_stage()\nprim = stage.GetPrimAtPath(\"/World/UR5e\")\n\nif not prim.IsValid():\n    # First time - load everything\n    from omni.isaac.core.utils.physics import simulate_async\n    world = World()\n    world.scene.add_default_ground_plane()\n\n    asset_path = \"omniverse://localhost/NVIDIA/Assets/Isaac/4.5/Isaac/Robots/UniversalRobots/ur5e/ur5e.usd\"\n    add_reference_to_stage(usd_path=asset_path, prim_path=\"/World/UR5e\")\n\n    # Enable physics scene first\n    from omni.physx import get_physx_interface\n    get_physx_interface().start_simulation()\n\n    world.reset()\n    print(\"Robot loaded for first time\")\n\n# Load IK solver\nhome_dir = os.getenv(\"HOME\")\npkg_dir = os.path.join(home_dir, \".local\", \"share\", \"ov\", \"pkg\")\nisaac_sim_versions = [d for d in os.listdir(pkg_dir) if d.startswith(\"isaac-sim-\")]\nisaac_sim_version = isaac_sim_versions[0]\nbase_path = os.path.join(pkg_dir, isaac_sim_version, \"exts\", \"omni.isaac.motion_generation\")\nrobot_description_path = os.path.join(base_path, \"motion_policy_configs\", \"universal_robots\", \"ur5e\", \"rmpflow\", \"ur5e_robot_description.yaml\")\nurdf_path = os.path.join(base_path, \"motion_policy_configs\", \"universal_robots\", \"ur5e\", \"ur5e.urdf\")\n\nik_solver = LulaKinematicsSolver(robot_description_path=robot_description_path, urdf_path=urdf_path)\n\n# Solve IK\narticulation = Articulation(\"/World/UR5e\")\narticulation.initialize()\narticulation_ik_solver = ArticulationKinematicsSolver(articulation, ik_solver, \"tool0\")\n\ntarget_position = np.array(target_pos, dtype=np.float32)\ntarget_orientation = np.array(euler_angles_to_quats(target_rot), dtype=np.float32)\n\naction, success = articulation_ik_solver.compute_inverse_kinematics(target_position, target_orientation)\n\nif success:\n    articulation.apply_action(action)\n    print(f\"IK Success! Target: {target_pos}, {target_rot}\")\n    print(f\"Joint angles: {action.joint_positions}\")\nelse:\n    print(f\"IK Failed for target: {target_pos}, {target_rot}\")\n</code></pre>"},{"location":"snippets/robot-arm/ik-control/#inverse-kinematics-with-articulationview-apply_action","title":"Inverse Kinematics with ArticulationView (apply_action)","text":"<pre><code>import omni.usd\nimport numpy as np\nimport os\nfrom omni.isaac.core.world import World\nfrom omni.isaac.core.utils.stage import add_reference_to_stage\nfrom omni.isaac.core.articulations import ArticulationView, Articulation\nfrom omni.isaac.core.utils.types import ArticulationActions\nfrom omni.isaac.motion_generation import LulaKinematicsSolver, ArticulationKinematicsSolver\nfrom omni.isaac.core.utils.numpy.rotations import euler_angles_to_quats\n\n# CHANGE THESE VALUES AND RERUN\ntarget_pos = [0.3, 0.3, 0.8]      # X, Y, Z position\ntarget_rot_deg = [0, 0, 0]       # Roll, Pitch, Yaw in degrees\ntarget_rot = [x * 3.14159/180 for x in target_rot_deg]  # convert to radians\n\n# Check if robot already exists\nstage = omni.usd.get_context().get_stage()\nprim = stage.GetPrimAtPath(\"/World/UR5e\")\n\nif not prim.IsValid():\n    # First time - load everything\n    from omni.isaac.core.utils.physics import simulate_async\n    world = World()\n    world.scene.add_default_ground_plane()\n\n    asset_path = \"omniverse://localhost/NVIDIA/Assets/Isaac/4.5/Isaac/Robots/UniversalRobots/ur5e/ur5e.usd\"\n    add_reference_to_stage(usd_path=asset_path, prim_path=\"/World/UR5e\")\n\n    # Enable physics scene first\n    from omni.physx import get_physx_interface\n    get_physx_interface().start_simulation()\n\n    world.reset()\n    print(\"Robot loaded for first time\")\n\n# Load IK solver\nhome_dir = os.getenv(\"HOME\")\npkg_dir = os.path.join(home_dir, \".local\", \"share\", \"ov\", \"pkg\")\nisaac_sim_versions = [d for d in os.listdir(pkg_dir) if d.startswith(\"isaac-sim-\")]\nisaac_sim_version = isaac_sim_versions[0]\nbase_path = os.path.join(pkg_dir, isaac_sim_version, \"exts\", \"omni.isaac.motion_generation\")\nrobot_description_path = os.path.join(base_path, \"motion_policy_configs\", \"universal_robots\", \"ur5e\", \"rmpflow\", \"ur5e_robot_description.yaml\")\nurdf_path = os.path.join(base_path, \"motion_policy_configs\", \"universal_robots\", \"ur5e\", \"ur5e.urdf\")\n\nik_solver = LulaKinematicsSolver(robot_description_path=robot_description_path, urdf_path=urdf_path)\n\n# Create ArticulationView\nur5e_view = World.instance().scene.get_object(\"ur5e_view\")\nif ur5e_view is None:\n    ur5e_view = ArticulationView(prim_paths_expr=\"/World/UR5e\", name=\"ur5e_view\")\n    World.instance().scene.add(ur5e_view)\n    ur5e_view.initialize()\n\n# Create separate Articulation for IK solving (ArticulationView can't be used directly with IK solver)\narticulation = Articulation(\"/World/UR5e\")\narticulation.initialize()\narticulation_ik_solver = ArticulationKinematicsSolver(articulation, ik_solver, \"tool0\")\n\n# Solve IK\ntarget_position = np.array(target_pos, dtype=np.float32)\ntarget_orientation = np.array(euler_angles_to_quats(target_rot), dtype=np.float32)\n\naction, success = articulation_ik_solver.compute_inverse_kinematics(target_position, target_orientation)\n\nif success:\n    # Apply using ArticulationView\n    ur5e_view.apply_action(action)\n    print(f\"IK Success! Target: {target_pos}, {target_rot}\")\n    print(f\"Joint angles: {action.joint_positions}\")\nelse:\n    print(f\"IK Failed for target: {target_pos}, {target_rot}\")\n</code></pre>"},{"location":"snippets/robot-arm/import-arm/","title":"Import Arm","text":""},{"location":"snippets/robot-arm/import-arm/#import-a-usd-prim-into-the-stage","title":"Import a USD prim into the stage","text":"<pre><code>import os\nfrom omni.isaac.core.utils.stage import add_reference_to_stage\n\n# Import a USD file as a prim\nusd_path = \"omniverse://localhost/NVIDIA/Assets/Isaac/4.5/Isaac/Robots/UniversalRobots/ur5e/ur5e.usd\"  # Change this to your USD path\nfilename = os.path.splitext(os.path.basename(usd_path))[0]\nprim_path = f\"/World/{filename}\" # Auto-name the prim using filename\n# prim_path = \"/World/ur5e\"  # Change this to your desired prim path\n\nadd_reference_to_stage(usd_path=usd_path, prim_path=prim_path)\nprint(f\"Prim imported at {prim_path}\")\n</code></pre>"},{"location":"snippets/robot-arm/import-arm/#import-a-usd-prim-at-xyzrpy-quaternions","title":"Import a USD prim at x,y,z,r,p,y, quaternions","text":"<pre><code>from pxr import Usd, UsdGeom, Gf\nimport numpy as np\nfrom omni.isaac.core.utils.numpy.rotations import euler_angles_to_quats\nimport omni.usd\n\nstage = omni.usd.get_context().get_stage()\nprim = stage.GetPrimAtPath(\"/World/ur5e\")\nif not prim.IsValid():\n    raise RuntimeError(\"Prim at /World/ur5e not found.\")\n\nxform = UsdGeom.Xform(prim)\nxform.ClearXformOpOrder()\n\n# Translation\nposition = Gf.Vec3d(1.0, 0.0, 0.0)\nxform.AddTranslateOp().Set(position)\n\n# RPY in degrees \u2192 radians \u2192 quaternion\nrpy_deg = np.array([0.0, 0.0, 0.0])\nrpy_rad = np.deg2rad(rpy_deg)\nquat_xyzw = euler_angles_to_quats(rpy_rad)\nquat = Gf.Quatd(quat_xyzw[0], quat_xyzw[1], quat_xyzw[2], quat_xyzw[3])\n\n# Add orient op with matching precision\norient_op = xform.AddOrientOp(UsdGeom.XformOp.PrecisionDouble)\norient_op.Set(quat)\n\nprint(\"Applied translation and rotation with double-precision quaternion.\")\n</code></pre>"},{"location":"snippets/scene/create-prim/","title":"Create","text":""},{"location":"snippets/scene/create-prim/#create-a-cube-in-the-stage","title":"Create a Cube in the Stage","text":"<pre><code>from pxr import Usd, UsdGeom, Gf\nimport omni.usd\n\n# Get the stage\nstage = omni.usd.get_context().get_stage()\n\n# Define prim path for the cube\ncube_path = \"/World/TestCube\"\n\n# Create the cube if it doesn't exist\nif not stage.GetPrimAtPath(cube_path).IsValid():\n    cube = UsdGeom.Cube.Define(stage, cube_path)\n    cube.CreateSizeAttr(0.2)  # Set cube size (optional)\n    print(f\"Created cube at {cube_path}\")\nelse:\n    print(f\"Cube already exists at {cube_path}\")\n</code></pre>"},{"location":"snippets/scene/delete-prim/","title":"Delete Prim","text":""},{"location":"snippets/scene/delete-prim/#remove-prim","title":"Remove Prim","text":"<pre><code>import omni.usd\n\nstage = omni.usd.get_context().get_stage()\nprim_path = \"/World/ur5e\"  # Change this to the prim you want to delete\nprim = stage.GetPrimAtPath(prim_path)\n\nstage.RemovePrim(prim_path)\n</code></pre>"},{"location":"snippets/scene/move-prim/","title":"Move Prim","text":"<pre><code>import omni.kit.commands\nfrom pxr import Gf\n\n# Generic variables - change these values\nprim_path = \"/World/your_object_name\"  # Full path to your object\nposition = [0.0, 0.0, 0.0]            # [x, y, z] in meters\nrotation = [0.0, 0.0, 0.0]            # [x, y, z] in degrees  \nscale = [1.0, 1.0, 1.0]               # [x, y, z] scale factors\n\n# Set translate\nomni.kit.commands.execute('ChangeProperty',\n                         prop_path=f\"{prim_path}.xformOp:translate\",\n                         value=Gf.Vec3d(position[0], position[1], position[2]),\n                         prev=None)\n\n# Set rotation (Euler angles in degrees)\nomni.kit.commands.execute('ChangeProperty',\n                         prop_path=f\"{prim_path}.xformOp:rotateXYZ\",\n                         value=Gf.Vec3d(rotation[0], rotation[1], rotation[2]),\n                         prev=None)\n\n# Set scale\nomni.kit.commands.execute('ChangeProperty',\n                         prop_path=f\"{prim_path}.xformOp:scale\",\n                         value=Gf.Vec3d(scale[0], scale[1], scale[2]),\n                         prev=None)\n\nprint(f\"Transform set for: {prim_path}\")\nprint(f\"Position: {position}\")\nprint(f\"Rotation: {rotation}\")\nprint(f\"Scale: {scale}\")\n</code></pre>"},{"location":"snippets/scene/set-physics/","title":"Set Physics","text":""},{"location":"snippets/scene/set-physics/#apply-rigid-body-preset","title":"Apply Rigid body preset","text":"<p><pre><code>from pxr import UsdPhysics, Usd, UsdGeom\nimport omni.usd\n\nstage = omni.usd.get_context().get_stage()\nprim_path = \"/World/TestCube\"\nprim = stage.GetPrimAtPath(prim_path)\n\nif prim.IsValid() and not prim.HasAPI(UsdPhysics.RigidBodyAPI):\n    UsdPhysics.RigidBodyAPI.Apply(prim)\n    prim.GetAttribute(\"physics:rigidBodyEnabled\").Set(True)\n    print(f\"Applied RigidBodyAPI to: {prim_path}\")\nelse:\n    print(f\"Prim not found or already has RigidBodyAPI: {prim_path}\")\n</code></pre> Applies <code>UsdPhysics.RigidBodyAPI</code> to a prim, enabling dynamic simulation and gravity response within the physics scene.</p>"},{"location":"snippets/scene/set-physics/#apply-colliders-preset","title":"Apply Colliders preset","text":"<p><pre><code>from pxr import UsdPhysics, UsdGeom, Usd\nimport omni.usd\n\nstage = omni.usd.get_context().get_stage()\nprim_path = \"/World/TestCube\"\nprim = stage.GetPrimAtPath(prim_path)\n\nif prim.IsValid():\n    for desc in Usd.PrimRange(prim):\n        if desc.IsA(UsdGeom.Mesh) or desc.IsA(UsdGeom.Gprim):\n            UsdPhysics.CollisionAPI.Apply(desc).CreateCollisionEnabledAttr(True)\n            print(f\"Collider enabled on: {desc.GetPath()}\")\nelse:\n    print(f\"Prim not found at: {prim_path}\")\n</code></pre> Applies <code>UsdPhysics.CollisionAPI</code> to enable collision detection on mesh or geometric prims for physical interaction.</p>"},{"location":"snippets/scene/set-physics/#apply-colliders-preset-with-convexdecomposition","title":"Apply Colliders preset with ConvexDecomposition","text":"<p><pre><code>from pxr import UsdPhysics, UsdGeom, PhysxSchema, Usd\nimport omni.usd\n\nstage = omni.usd.get_context().get_stage()\nprim_path = \"/World/TestCube\"\nroot_prim = stage.GetPrimAtPath(prim_path)\n\nif not root_prim.IsValid():\n    print(f\"Prim not found at {prim_path}\")\nelse:\n    for desc in Usd.PrimRange(root_prim):\n        if desc.IsA(UsdGeom.Mesh) or desc.IsA(UsdGeom.Gprim):\n            UsdPhysics.CollisionAPI.Apply(desc).CreateCollisionEnabledAttr(True)\n            PhysxSchema.PhysxCollisionAPI.Apply(desc).CreateRestOffsetAttr(0.0)\n            UsdPhysics.MeshCollisionAPI.Apply(desc).CreateApproximationAttr().Set(\"convexDecomposition\")\n            print(f\"Collider set on: {desc.GetPath()}\")\n</code></pre> Enables collision using PhysX convex decomposition for accurate shape approximation on meshes.</p> <p>Without Convex Decomposition</p>        Your browser does not support the video tag.      <p>With Convex Decomposition</p>        Your browser does not support the video tag."},{"location":"snippets/scene/set-physics/#set-restitution-to-deal-with-bounciness-of-object","title":"Set Restitution to deal with bounciness of object","text":"<p>Youtube Tutorial:  Omniverse Physics Extension - Kit104 - Part 9: Materials - Friction Restitution and Defaults </p> <p><pre><code>from pxr import UsdPhysics, PhysxSchema, UsdShade\nimport omni.usd\n\nstage = omni.usd.get_context().get_stage()\n\n# === Create Physics Material (Low Bounce for Jenga) ===\nmat_path = \"/World/JengaPhysMat\"\nmat_prim = UsdShade.Material.Define(stage, mat_path).GetPrim()\n\n# Apply physics material APIs\nUsdPhysics.MaterialAPI.Apply(mat_prim)\nPhysxSchema.PhysxMaterialAPI.Apply(mat_prim)\n\n# Set material properties for realistic wood behavior\nUsdPhysics.MaterialAPI(mat_prim).CreateRestitutionAttr().Set(0.1)      # Very low bounce\nUsdPhysics.MaterialAPI(mat_prim).CreateStaticFrictionAttr().Set(0.7)   # Good grip when stationary\nUsdPhysics.MaterialAPI(mat_prim).CreateDynamicFrictionAttr().Set(0.6)  # Sliding friction\n\n# PhysX-specific settings\nPhysxSchema.PhysxMaterialAPI(mat_prim).CreateRestitutionCombineModeAttr().Set(PhysxSchema.Tokens.min)  # Use minimum restitution\nPhysxSchema.PhysxMaterialAPI(mat_prim).CreateFrictionCombineModeAttr().Set(PhysxSchema.Tokens.average)\n\n# === Apply Material to Jenga Block ===\ncube_path = \"/World/JengaBlock2\"\ncube_prim = stage.GetPrimAtPath(cube_path)\n\nif cube_prim:\n    UsdShade.MaterialBindingAPI.Apply(cube_prim).Bind(UsdShade.Material(mat_prim))\n    print(f\"Low-bounce physics material applied to {cube_path}\")\nelse:\n    print(f\"Prim not found at {cube_path}\")\n</code></pre> Enabling restitution enables accurate pick and place sequence.</p> <p>With no Restitution set</p>        Your browser does not support the video tag.      <p>With Restitution=0.7</p>        Your browser does not support the video tag."},{"location":"snippets/scene/setup-scene/","title":"Setup Scene","text":""},{"location":"snippets/scene/setup-scene/#initialize-simulation-and-add-a-ground-plane","title":"Initialize simulation and add a ground plane","text":"<pre><code>import asyncio\nfrom omni.isaac.core.world import World\n\nasync def load_scene():\n    world = World()\n    await world.initialize_simulation_context_async()\n    world.scene.add_default_ground_plane()\n    print(\"Scene loaded successfully.\")\n\n# Run the function\nasyncio.ensure_future(load_scene())\n</code></pre>"},{"location":"snippets/scene/timeline/","title":"Timeline","text":""},{"location":"snippets/scene/timeline/#play-simulation","title":"Play Simulation","text":"<pre><code>import omni.timeline\n\ntimeline = omni.timeline.get_timeline_interface()\ntimeline.play()\nprint(\"Simulation started.\")\n</code></pre>"},{"location":"snippets/scene/timeline/#pause-simulation","title":"Pause Simulation","text":"<pre><code>import omni.timeline\n\ntimeline = omni.timeline.get_timeline_interface()\ntimeline.pause()\nprint(\"Simulation paused.\")\n</code></pre>"},{"location":"snippets/scene/timeline/#stop-simulation","title":"Stop Simulation","text":"<pre><code>import omni.timeline\n\ntimeline = omni.timeline.get_timeline_interface()\ntimeline.stop()\nprint(\"Simulation stopped and reset.\")\n</code></pre>"},{"location":"snippets/state/read-collision/","title":"Collision","text":""},{"location":"snippets/state/read-collision/#setup-two-cubes-with-collision","title":"Setup Two cubes with collision","text":"<pre><code>import omni.kit.commands\nfrom omni.physx.scripts.physicsUtils import set_or_add_translate_op\nfrom pxr import UsdGeom, UsdPhysics, PhysxSchema, Usd, Gf\nimport omni.physxdemos as demo\n\ndef add_minimal_collision(stage, prim_path):\n    \"\"\"Add only collision - no rigid body physics\"\"\"\n    prim = stage.GetPrimAtPath(prim_path)\n    if prim.IsValid():\n        # Add collision to mesh children - this might be all we need\n        for desc in Usd.PrimRange(prim):\n            if desc.IsA(UsdGeom.Mesh) or desc.IsA(UsdGeom.Gprim):\n                UsdPhysics.CollisionAPI.Apply(desc).CreateCollisionEnabledAttr(True)\n                PhysxSchema.PhysxCollisionAPI.Apply(desc).CreateRestOffsetAttr(0.0)\n                UsdPhysics.MeshCollisionAPI.Apply(desc).CreateApproximationAttr().Set(\"convexDecomposition\")\n\ndef spawn_two_cubes_minimal(stage):\n    # Setup physics scene (needed for query interface)\n    defaultPrimPath, scene = demo.setup_physics_scene(None, stage)\n\n    # Create first cube\n    result, cube1_path = omni.kit.commands.execute(\"CreateMeshPrim\", prim_type=\"Cube\", select_new_prim=False)\n    final_cube1_path = defaultPrimPath + \"/cube1\"\n    omni.kit.commands.execute(\"MovePrim\", path_from=cube1_path, path_to=final_cube1_path)\n\n    cube1_mesh = UsdGeom.Mesh.Get(stage, final_cube1_path)\n    set_or_add_translate_op(cube1_mesh, translate=Gf.Vec3f(-50.0, 0.0, 0.0))\n\n    # Add only collision (no rigid body)\n    add_minimal_collision(stage, final_cube1_path)\n\n    # Create second cube\n    result, cube2_path = omni.kit.commands.execute(\"CreateMeshPrim\", prim_type=\"Cube\", select_new_prim=False)\n    final_cube2_path = defaultPrimPath + \"/cube2\"\n    omni.kit.commands.execute(\"MovePrim\", path_from=cube2_path, path_to=final_cube2_path)\n\n    cube2_mesh = UsdGeom.Mesh.Get(stage, final_cube2_path)\n    set_or_add_translate_op(cube2_mesh, translate=Gf.Vec3f(50.0, 0.0, 0.0))\n\n    # Add only collision (no rigid body)\n    add_minimal_collision(stage, final_cube2_path)\n\n    print(f\"Spawned cubes with minimal collision at: {final_cube1_path} and {final_cube2_path}\")\n    return final_cube1_path, final_cube2_path\n\n# Usage\n# stage = omni.usd.get_context().get_stage()\n# cube1_path, cube2_path = spawn_two_cubes_minimal(stage)\n</code></pre>"},{"location":"snippets/state/read-collision/#check-collision","title":"Check Collision","text":"<pre><code>from omni.physx import get_physx_scene_query_interface\nfrom pxr import Sdf, PhysicsSchemaTools\n\ndef check_collision(prim1_path, prim2_path):\n    \"\"\"\n    Check if two prims are colliding\n\n    Args:\n        prim1_path (str): Full path to first prim (e.g., \"/World/cube1\")\n        prim2_path (str): Full path to second prim (e.g., \"/World/cube2\")\n\n    Returns:\n        bool: True if collision detected, False otherwise\n    \"\"\"\n    collision_detected = False\n    target_prim_path = prim2_path\n\n    def collision_callback(hit):\n        nonlocal collision_detected, target_prim_path\n        if hit.rigid_body == target_prim_path:\n            collision_detected = True\n            print(f\"COLLISION DETECTED between {prim1_path} and {prim2_path}\")\n        return True\n\n    # Convert paths for PhysX query\n    path_tuple = PhysicsSchemaTools.encodeSdfPath(Sdf.Path(prim1_path))\n\n    # Perform overlap query\n    get_physx_scene_query_interface().overlap_mesh(\n        path_tuple[0], \n        path_tuple[1], \n        collision_callback, \n        False\n    )\n\n    return collision_detected\n\n# Usage example:\n# collision_found = check_collision(\"/World/cube1\", \"/World/cube2\")\n# if collision_found:\n#     print(\"Cubes are colliding!\")\n# else:\n#     print(\"No collision detected.\")\n</code></pre>"},{"location":"snippets/state/read-transform/","title":"Transform","text":""},{"location":"snippets/state/read-transform/#translation","title":"Translation","text":"<pre><code>prim_path = \"/World/your_object_name\"\n\nimport omni.usd\nstage = omni.usd.get_context().get_stage()\nprim = stage.GetPrimAtPath(prim_path)\n\ntranslate_attr = prim.GetAttribute(\"xformOp:translate\")\nposition = [0.0, 0.0, 0.0]\nif translate_attr.IsValid():\n    translate_value = translate_attr.Get()\n    if translate_value:\n        position = [float(translate_value[0]), float(translate_value[1]), float(translate_value[2])]\n\nprint(f\"Translate: {position}\")\n</code></pre>"},{"location":"snippets/state/read-transform/#orientation","title":"Orientation","text":"<pre><code>prim_path = \"/World/your_object_name\"\n\nimport omni.usd\nstage = omni.usd.get_context().get_stage()\nprim = stage.GetPrimAtPath(prim_path)\n\norient_attr = prim.GetAttribute(\"xformOp:orient\")\nquaternion = [1.0, 0.0, 0.0, 0.0]\nif orient_attr.IsValid():\n    orient_value = orient_attr.Get()\n    if orient_value:\n        quaternion = [float(orient_value.GetReal()), float(orient_value.GetImaginary()[0]), \n                     float(orient_value.GetImaginary()[1]), float(orient_value.GetImaginary()[2])]\n\nprint(f\"Orient [w,x,y,z]: {quaternion}\")\n</code></pre>"},{"location":"snippets/state/read-transform/#scale","title":"Scale","text":"<pre><code>prim_path = \"/World/your_object_name\"\n\nimport omni.usd\nstage = omni.usd.get_context().get_stage()\nprim = stage.GetPrimAtPath(prim_path)\n\nscale_attr = prim.GetAttribute(\"xformOp:scale\")\nscale = [1.0, 1.0, 1.0]\nif scale_attr.IsValid():\n    scale_value = scale_attr.Get()\n    if scale_value:\n        scale = [float(scale_value[0]), float(scale_value[1]), float(scale_value[2])]\n\nprint(f\"Scale: {scale}\")\n</code></pre>"},{"location":"tutorials/asu-ur5e-rg2-dt-setup/","title":"UR5e + RG2 Gripper Setup (Sim + Real World)","text":"<p>This tutorial walks you through setting up the UR5e robot with an RG2 gripper for both Isaac Sim (4.2 and 4.5) and a physical robot, including control, ROS 2 integration, and URSim.</p>"},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#part-1-setup-extension-in-isaac-sim","title":"Part 1: Setup Extension in Isaac Sim","text":""},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#clone-the-extension","title":"Clone the Extension","text":"<pre><code>git clone https://github.com/inbarajaldrin/vlm_isaac_sim\n</code></pre>"},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#add-extension-path-in-isaac-sim-settings","title":"Add Extension Path in Isaac Sim Settings","text":"<p>For Isaac Sim 4.2: <pre><code>/home/{your_username}/Documents/vlm_isaac_sim/isaac_exts/asu-ur5e-dt/exts\n</code></pre></p> <p>For Isaac Sim 4.5: <pre><code>/home/{your_username}/Documents/vlm_isaac_sim/isaac_exts/\n</code></pre></p> <p>Go crazy on the UI buttons.</p>"},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#part-2-ursim-simulation-of-real-robot","title":"Part 2: URSim (Simulation of Real Robot)","text":""},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#run-ursim-container","title":"Run URSim Container","text":"<pre><code>docker run --rm -it \\\n  -p 5900:5900 -p 6080:6080 \\\n  -v ${HOME}/.ursim/urcaps:/urcaps \\\n  -v ${HOME}/.ursim/programs:/ursim/programs \\\n  --name ursim universalrobots/ursim_e-series\n</code></pre>"},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#part-3-bringup-in-ros-2","title":"Part 3: Bringup in ROS 2","text":""},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#ur5e-in-simulation-ursim","title":"UR5e in Simulation (URSim)","text":"<pre><code>ros2 launch ur_bringup ur5e.launch.py ur_type:=ur5e robot_ip:=172.17.0.2\n</code></pre>"},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#ur5e-in-real-hardware","title":"UR5e in Real Hardware","text":"<pre><code>ros2 launch ur_bringup ur5e.launch.py ur_type:=ur5e robot_ip:=192.168.1.111\n</code></pre> <p>Also install URCap and configure the robot IP address to <code>192.168.1.164</code>.</p>"},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#part-4-rg2-gripper-control-ros-2","title":"Part 4: RG2 Gripper Control (ROS 2)","text":""},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#repo","title":"Repo","text":"<p>https://github.com/karishmapatnaik/onrobot_ros</p>"},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#run-gripper-control-node","title":"Run Gripper Control Node","text":"<pre><code>ros2 run onrobot_ros gripper_control\n</code></pre>"},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#send-gripper-commands","title":"Send Gripper Commands","text":"<pre><code>ros2 topic pub --once /gripper_command std_msgs/String \"{data: '200'}\"    # Position: 0\u20131100\nros2 topic pub --once /gripper_command std_msgs/String \"{data: 'open'}\"   # Fully open\nros2 topic pub --once /gripper_command std_msgs/String \"{data: 'close'}\"  # Fully close\n</code></pre>"},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#part-5-jenga-pose-estimation-hand-in-eye","title":"Part 5: Jenga Pose Estimation (Hand-in-Eye)","text":"<p>For vision-based pose localization:</p>"},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#repo_1","title":"Repo","text":"<p>https://github.com/MaxlGao/max_camera_localizer</p>"},{"location":"tutorials/asu-ur5e-rg2-dt-setup/#run-localizer","title":"Run Localizer","text":"<pre><code>ros2 run max_camera_localizer localize\n</code></pre> <p>Use this to find pose of Jenga blocks using intelrealsense camera.</p>"},{"location":"tutorials/isaac-sim-ros2-mcp-setup/","title":"Isaac Sim + ROS 2 MCP Integration","text":""},{"location":"tutorials/isaac-sim-ros2-mcp-setup/#isaac-sim-mcp-extension","title":"Isaac Sim MCP Extension","text":"<p>Youtube video- IsaacSim MCP integration on Linux</p>"},{"location":"tutorials/isaac-sim-ros2-mcp-setup/#repo","title":"Repo:","text":"<p>https://github.com/inbarajaldrin/isaac-sim-mcp</p> <p>This repo includes:</p> <ul> <li>MCP setup instructions</li> <li>Claude Desktop integration</li> <li>Example agent workflows</li> </ul> <p>If you're using Claude Desktop, follow the full setup instructions in the repo and video.</p> <p>If your using API calls</p>"},{"location":"tutorials/isaac-sim-ros2-mcp-setup/#python3-isaac_mcpmainpy","title":"<pre><code>python3 isaac_mcp/main.py\n</code></pre>","text":""},{"location":"tutorials/isaac-sim-ros2-mcp-setup/#ros-2-mcp-server","title":"ROS 2 MCP Server","text":""},{"location":"tutorials/isaac-sim-ros2-mcp-setup/#repo_1","title":"Repo:","text":"<p>ros-mcp-server</p> <p>This repo includes:</p> <ul> <li>MCP setup instructions</li> <li>rosbridge_suite installation instructions</li> </ul> <p>Then launch the WebSocket server:</p> <pre><code>ros2 launch rosbridge_server rosbridge_websocket_launch.xml\n</code></pre>"},{"location":"tutorials/isaac-sim-ros2-mcp-setup/#ursim-real-robot-configuration","title":"URSim / Real Robot Configuration","text":"<p>In both URSim and real robot, enable the URCap to allow external agent control.</p>"},{"location":"tutorials/isaac-sim-ros2-mcp-setup/#ur-primitives","title":"UR Primitives","text":"<p>https://github.com/karishmapatnaik/ur_asu</p> <p>update the location of the file https://github.com/karishmapatnaik/ur_asu/blob/main/ur_asu/custom_libraries/ik_solver.py in your directory in this file https://github.com/inbarajaldrin/isaac-sim-mcp/blob/main/isaac.sim.mcp_extension/isaac_sim_mcp_extension/extension.py and this file https://github.com/inbarajaldrin/ros-mcp-server/blob/main/server.py</p>"},{"location":"tutorials/troubleshooting/","title":"Omniverse Nucleus","text":""},{"location":"tutorials/troubleshooting/#fixing-omniverse-nucleus-localhost-access-issue","title":"Fixing Omniverse Nucleus <code>localhost</code> Access Issue","text":""},{"location":"tutorials/troubleshooting/#problem","title":"Problem:","text":"<p>When you try to reconnect you get this error,</p> <p></p> <p></p> <p>\"Unable to connect to server 'omniverse://localhost'. Please check your internet connection.\"</p>"},{"location":"tutorials/troubleshooting/#solution","title":"Solution:","text":""},{"location":"tutorials/troubleshooting/#check-if-nucleus-is-running","title":"Check if Nucleus is Running","text":"<ul> <li>Visit: http://localhost:3080 </li> <li>If you see the nucleus not runnng. Then just press the start button. </li> </ul> <p>Now you should have access to your assets in your localhost nucleus server.</p>"},{"location":"tutorials/troubleshooting/#useful-links","title":"Useful Links","text":"<ul> <li>Omniverse Nucleus Usage Guide</li> <li>Nucleus Authentication &amp; Permissions</li> </ul>"}]}